#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>

int main() {
    int pipefd[2];
    pid_t pid;
    char buffer[20];

    // Création du pipe
    if (pipe(pipefd) == -1) {
        perror("Erreur lors de la création du pipe");
        exit(EXIT_FAILURE);
    }
    
    // Création d'un processus enfant
    pid = fork();

    if (pid < 0) {
        perror("Erreur lors de la création du processus enfant");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Processus enfant
        close(pipefd[1]);  // Fermeture de l'extrémité d'écriture du pipe

        // Lecture des données du pipe
        read(pipefd[0], buffer, sizeof(buffer));
        printf("Processus enfant - Message reçu : %s\n", buffer);

        close(pipefd[0]);  // Fermeture de l'extrémité de lecture du pipe
    } else {
        // Processus parent
        close(pipefd[0]);  // Fermeture de l'extrémité de lecture du pipe

        // Écriture des données dans le pipe
        char message[] = "Bonjour, monde!";
        write(pipefd[1], message, sizeof(message));

        close(pipefd[1]);  // Fermeture de l'extrémité d'écriture du pipe
    }

    return 0;
}



// 5 => 5 * 4 = 20 => 20;
    int fd[2];
    //fd[0] ==> read;
    //fd[1] ==> write;
    if(pipe(fd) == -1)
        return (1);
    
    int id = fork();

    if(id == -1)
        return (2);
    else if(id == 0)
    {
        close(fd[0]);

        int x;
        printf("print a number between 0 and 9 : ");
        scanf("%d",&x);

        if(write(fd[1], &x, sizeof(int)) == -1)
            return (3);
        close(fd[1]);

        int res1;
        if(read(fd[0], &res1, sizeof(int)) == -1)
            return (5);
        close(fd[0]);
        printf("child result : %d\n",res1);
        // wait(NULL);

    }
    else
    {
        close(fd[1]);
        int res;

        if(read(fd[0], &res, sizeof(int)) == -1)
            return (4);
        close(fd[0]);
        res *= 4;
        printf("parent result : %d\n",res);
        
        if(write(fd[1], &res, sizeof(int)) == -1)
            return (5);
        close(fd[1]);
        return 0;
    }